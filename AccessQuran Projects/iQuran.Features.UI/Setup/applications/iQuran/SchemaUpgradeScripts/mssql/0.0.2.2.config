-- =============================================
-- Description:	Functions
-- =============================================
 
/****** Object:  UserDefinedFunction [dbo].[fn_Split]    Script Date: 04/14/2015 17:24:41 ******/
SET ANSI_NULLS OFF
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE FUNCTION [dbo].[fn_Split](@sText nvarchar(4000), @sDelim varchar(20) = ' ')
RETURNS @retArray TABLE (idx smallint Primary Key, value nvarchar(4000))
AS
BEGIN
DECLARE @idx smallint,
@value nvarchar(4000),
@bcontinue bit,
@iStrike smallint,
@iDelimlength tinyint
IF @sDelim = 'Space'
BEGIN
SET @sDelim = ' '
END
SET @idx = 0
SET @sText = LTrim(RTrim(@sText))
SET @iDelimlength = DATALENGTH(@sDelim)
SET @bcontinue = 1
IF NOT ((@iDelimlength = 0) or (@sDelim = 'Empty'))
BEGIN
WHILE @bcontinue = 1
BEGIN
--If you can find the delimiter in the text, retrieve the first element and
--insert it with its index into the return table.

IF CHARINDEX(@sDelim, @sText)>0
BEGIN
SET @value = SUBSTRING(@sText,1, CHARINDEX(@sDelim,@sText)-1)
BEGIN
INSERT @retArray (idx, value)
VALUES (@idx, @value)
END
--Trim the element and its delimiter from the front of the string.
--Increment the index and loop.
--inna SET @iStrike = DATALENGTH(@value) + @iDelimlength
SET @iStrike = LEN(@value) + @iDelimlength
SET @idx = @idx + 1
--inna			SET @sText = LTrim(Right(@sText,DATALENGTH(@sText) - @iStrike))
SET @sText = substring(@sText,@iStrike+1, Len(@sText) - @iStrike)
END
ELSE
BEGIN
--If you cant find the delimiter in the text, @sText is the last value in
--@retArray.
SET @value = @sText
BEGIN
INSERT @retArray (idx, value)
VALUES (@idx, @value)
END
--Exit the WHILE loop.
SET @bcontinue = 0
END
END
END
ELSE
BEGIN
WHILE @bcontinue=1
BEGIN
--If the delimiter is an empty string, check for remaining text
--instead of a delimiter. Insert the first character into the
--retArray table. Trim the character from the front of the string.
--Increment the index and loop.
IF DATALENGTH(@sText)>1
BEGIN
SET @value = SUBSTRING(@sText,1,1)
BEGIN
INSERT @retArray (idx, value)
VALUES (@idx, @value)
END
SET @idx = @idx+1
SET @sText = SUBSTRING(@sText,2,DATALENGTH(@sText)-1)

END
ELSE
BEGIN
--One character remains.
--Insert the character, and exit the WHILE loop.
INSERT @retArray (idx, value)
VALUES (@idx, @sText)
SET @bcontinue = 0
END
END
END
RETURN
END








GO

/****** Object:  UserDefinedFunction [dbo].[fn_SplitDouble]    Script Date: 04/14/2015 17:24:42 ******/
SET ANSI_NULLS OFF
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE FUNCTION [dbo].[fn_SplitDouble](@sText1 varchar(4000),@sText2 varchar(4000), @sDelim varchar(20) = ' ')
RETURNS @retArray TABLE (idx smallint Primary Key, value1 varchar(4000),value2 varchar(4000))
AS
BEGIN
DECLARE @idx smallint,
@value1 varchar(4000),
@value2 varchar(4000),
@bcontinue bit,
@iStrike1 smallint,
@iStrike2 smallint,
@iDelimlength tinyint
IF @sDelim = 'Space'
BEGIN
SET @sDelim = ' '
END
SET @idx = 0
SET @sText1 = LTrim(RTrim(@sText1))
SET @sText2 = LTrim(RTrim(@sText2))

SET @sText1 = LTrim(LEFT(@sText1,DATALENGTH(@sText1) - 1))
SET @sText2 = LTrim(LEFT(@sText2,DATALENGTH(@sText2) - 1))


SET @iDelimlength = DATALENGTH(@sDelim)
SET @bcontinue = 1
IF NOT ((@iDelimlength = 0) or (@sDelim = 'Empty'))
BEGIN
WHILE @bcontinue = 1
BEGIN
--If you can find the delimiter in the text, retrieve the first element and
--insert it with its index into the return table.

IF CHARINDEX(@sDelim, @sText1)>0
BEGIN
SET @value1 = SUBSTRING(@sText1,1, CHARINDEX(@sDelim,@sText1)-1)
SET @value2 = SUBSTRING(@sText2,1, CHARINDEX(@sDelim,@sText2)-1)

BEGIN
INSERT @retArray (idx, value1,value2)
VALUES (@idx, @value1,@value2)
END
--Trim the element and its delimiter from the front of the string.
--Increment the index and loop.
--inna SET @iStrike1 = DATALENGTH(@value1) + @iDelimlength
SET @iStrike1 = LEN(@value1) + @iDelimlength
SET @iStrike2 = LEN(@value2) + @iDelimlength
SET @idx = @idx + 1
--inna			SET @sText1 = LTrim(Right(@sText1,DATALENGTH(@sText1) - @iStrike1))
SET @sText1 = substring(@sText1,@iStrike1+1, Len(@sText1) - @iStrike1)
SET @sText2 = substring(@sText2,@iStrike2+1, Len(@sText2) - @iStrike2)
END
ELSE
BEGIN
--If you cant find the delimiter in the text, @sText1 is the last value1 in
--@retArray.
SET @value1 = @sText1
SET @value2 = @sText2
BEGIN
INSERT @retArray (idx, value1, value2)
VALUES (@idx, @value1, @value2)
END
--Exit the WHILE loop.
SET @bcontinue = 0
END
END
END
ELSE
BEGIN
WHILE @bcontinue=1
BEGIN
--If the delimiter is an empty string, check for remaining text
--instead of a delimiter. Insert the first character into the
--retArray table. Trim the character from the front of the string.
--Increment the index and loop.
IF DATALENGTH(@sText1)>1
BEGIN
SET @value1 = SUBSTRING(@sText1,1,1)
SET @value2 = SUBSTRING(@sText2,1,1)
BEGIN
INSERT @retArray (idx, value1,value2)
VALUES (@idx, @value1,@value2)
END
SET @idx = @idx+1
SET @sText1 = SUBSTRING(@sText1,2,DATALENGTH(@sText1)-1)
SET @sText2 = SUBSTRING(@sText2,2,DATALENGTH(@sText2)-1)

END
ELSE
BEGIN
--One character remains.
--Insert the character, and exit the WHILE loop.
INSERT @retArray (idx, value1,value2)
VALUES (@idx, @sText1,@sText2)
SET @bcontinue = 0
END
END
END
RETURN
END








GO

/****** Object:  UserDefinedFunction [dbo].[fn_SplitTribble]    Script Date: 04/14/2015 17:24:42 ******/
SET ANSI_NULLS OFF
GO

SET QUOTED_IDENTIFIER ON
GO












CREATE FUNCTION [dbo].[fn_SplitTribble](@sText1 nvarchar(4000),@sText2 nvarchar(4000),@sText3 nvarchar(4000), @sDelim varchar(20) = ' ')
RETURNS @retArray TABLE (idx smallint Primary Key, value1 nvarchar(4000),value2 nvarchar(4000),value3 nvarchar(4000))
AS
BEGIN
DECLARE @idx smallint,
@value1 nvarchar(4000),
@value2 nvarchar(4000),
@bcontinue bit,
@iStrike1 smallint,
@iStrike2 smallint,
@iDelimlength tinyint
IF @sDelim = 'Space'
BEGIN
SET @sDelim = ' '
END
SET @idx = 0
SET @sText1 = LTrim(RTrim(@sText1))
SET @sText2 = LTrim(RTrim(@sText2))
SET @iDelimlength = DATALENGTH(@sDelim)
SET @bcontinue = 1
IF NOT ((@iDelimlength = 0) or (@sDelim = 'Empty'))
BEGIN
WHILE @bcontinue = 1
BEGIN
--If you can find the delimiter in the text, retrieve the first element and
--insert it with its index into the return table.

IF CHARINDEX(@sDelim, @sText1)>0
BEGIN
SET @value1 = SUBSTRING(@sText1,1, CHARINDEX(@sDelim,@sText1)-1)
SET @value2 = SUBSTRING(@sText2,1, CHARINDEX(@sDelim,@sText2)-1)

BEGIN
INSERT @retArray (idx, value1,value2)
VALUES (@idx, @value1,@value2)
END
--Trim the element and its delimiter from the front of the string.
--Increment the index and loop.
--inna SET @iStrike1 = DATALENGTH(@value1) + @iDelimlength
SET @iStrike1 = LEN(@value1) + @iDelimlength
SET @iStrike2 = LEN(@value2) + @iDelimlength
SET @idx = @idx + 1
--inna			SET @sText1 = LTrim(Right(@sText1,DATALENGTH(@sText1) - @iStrike1))
SET @sText1 = substring(@sText1,@iStrike1+1, Len(@sText1) - @iStrike1)
SET @sText2 = substring(@sText2,@iStrike2+1, Len(@sText2) - @iStrike2)
END
ELSE
BEGIN
--If you cant find the delimiter in the text, @sText1 is the last value1 in
--@retArray.
SET @value1 = @sText1
SET @value2 = @sText2
BEGIN
INSERT @retArray (idx, value1, value2)
VALUES (@idx, @value1, @value2)
END
--Exit the WHILE loop.
SET @bcontinue = 0
END
END
END
ELSE
BEGIN
WHILE @bcontinue=1
BEGIN
--If the delimiter is an empty string, check for remaining text
--instead of a delimiter. Insert the first character into the
--retArray table. Trim the character from the front of the string.
--Increment the index and loop.
IF DATALENGTH(@sText1)>1
BEGIN
SET @value1 = SUBSTRING(@sText1,1,1)
SET @value2 = SUBSTRING(@sText2,1,1)
BEGIN
INSERT @retArray (idx, value1,value2)
VALUES (@idx, @value1,@value2)
END
SET @idx = @idx+1
SET @sText1 = SUBSTRING(@sText1,2,DATALENGTH(@sText1)-1)
SET @sText2 = SUBSTRING(@sText2,2,DATALENGTH(@sText2)-1)

END
ELSE
BEGIN
--One character remains.
--Insert the character, and exit the WHILE loop.
INSERT @retArray (idx, value1,value2)
VALUES (@idx, @sText1,@sText2)
SET @bcontinue = 0
END
END
END
RETURN
END








GO


